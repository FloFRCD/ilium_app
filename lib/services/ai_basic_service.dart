import '../services/openai_service.dart';
import '../utils/logger.dart';

/// Service IA √©conomique pour les t√¢ches basiques
/// Utilise gpt-5-nano pour r√©duire les co√ªts
class AIBasicService {
  final OpenAIService _openaiService = OpenAIService();
  
  /// Formate et corrige le niveau scolaire saisi par l'utilisateur
  Future<String> formatNiveauScolaire(String niveauSaisi) async {
    try {
      String prompt = '''
Corrige et formate ce niveau scolaire: "$niveauSaisi"

R√®gles:
- Retourner le niveau correct en fran√ßais (CP, CE1, CE2, CM1, CM2, 6√®me, 5√®me, 4√®me, 3√®me, 2nde, 1√®re, Terminale)
- Si "terminal" ‚Üí "Terminale" 
- Si "premiere" ‚Üí "1√®re"
- Si "seconde" ‚Üí "2nde"
- Si incertain, retourner le niveau le plus probable

R√©pondre UNIQUEMENT avec le niveau corrig√©, rien d'autre.
''';

      String? response = await _openaiService.makeBasicOpenAIRequest(prompt);
      
      if (response != null && _isValidNiveau(response.trim())) {
        return response.trim();
      }
      
      return _fallbackNiveauCorrection(niveauSaisi);
    } catch (e) {
      Logger.error('Erreur formatage niveau', e);
      return _fallbackNiveauCorrection(niveauSaisi);
    }
  }
  
  /// Formate et corrige les sp√©cialit√©s/options saisies par l'utilisateur
  Future<List<String>> formatSpecialites(List<String> specialitesSaisies, String niveau) async {
    try {
      String prompt = '''
Corrige et formate ces sp√©cialit√©s pour un √©l√®ve de $niveau: ${specialitesSaisies.join(', ')}

R√®gles:
- Utiliser les noms officiels des sp√©cialit√©s fran√ßaises
- Exemples: "Math√©matiques", "Physique-Chimie", "SVT", "Histoire-G√©ographie", "SES", "Anglais", "Espagnol", "NSI", "SI"
- Si "maths" ‚Üí "Math√©matiques"
- Si "physique" ‚Üí "Physique-Chimie" 
- Si "bio" ‚Üí "SVT"
- Si "informatique" ‚Üí "NSI"
- Adapter au niveau (pas de sp√©cialit√©s pour coll√®ge)

Format de r√©ponse (une par ligne):
Math√©matiques
Physique-Chimie
SVT
''';

      String? response = await _openaiService.makeBasicOpenAIRequest(prompt);
      
      if (response != null) {
        return _parseFormattedSpecialites(response);
      }
      
      return _fallbackSpecialitesCorrection(specialitesSaisies, niveau);
    } catch (e) {
      Logger.error('Erreur formatage sp√©cialit√©s', e);
      return _fallbackSpecialitesCorrection(specialitesSaisies, niveau);
    }
  }
  
  /// G√©n√®re une r√©ponse conversationnelle pour l'inscription
  Future<String> generateConversationalResponse({
    required String userMessage,
    required String etapeInscription,
    String? contexte,
  }) async {
    try {
      String prompt = '''
Tu es l'assistant d'inscription d'Ilium, une plateforme √©ducative. R√©ponds de mani√®re conversationnelle et bienveillante.

√âtape actuelle: $etapeInscription
Message utilisateur: "$userMessage"
${contexte != null ? 'Contexte: $contexte' : ''}

Instructions:
- R√©ponse courte (1-2 phrases max)
- Ton amical et encourageant
- Fran√ßais naturel, tutoiement
- Poser la prochaine question logique

Exemples de r√©ponses selon l'√©tape:
- niveau: "Super ! Tu es en Terminale alors. Quelles sp√©cialit√©s as-tu choisies cette ann√©e ?"
- specialites: "Excellent choix ! Math et Physique-Chimie, √ßa va te mener loin üöÄ Maintenant, quel pseudo aimerais-tu utiliser ?"
- pseudo: "Parfait ! Ton profil est pr√™t. Bienvenue sur Ilium ! üéâ"
''';

      String? response = await _openaiService.makeBasicOpenAIRequest(prompt);
      
      if (response != null && response.trim().isNotEmpty) {
        return response.trim();
      }
      
      return _getDefaultConversationalResponse(etapeInscription);
    } catch (e) {
      Logger.error('Erreur g√©n√©ration r√©ponse conversationnelle', e);
      return _getDefaultConversationalResponse(etapeInscription);
    }
  }
  
  /// G√©n√®re un message de bienvenue personnalis√© pendant l'inscription
  Future<String> generateWelcomeMessage({
    required String pseudo,
    required String niveau,
    List<String>? specialities,
  }) async {
    try {
      String specialitiesText = specialities?.isNotEmpty == true 
          ? 'avec les sp√©cialit√©s ${specialities!.join(', ')}'
          : '';
          
      String prompt = '''
√âcris un message de bienvenue chaleureux et motivant pour $pseudo, un √©l√®ve de $niveau $specialitiesText qui vient de s'inscrire sur Ilium (plateforme d'apprentissage).

Le message doit:
- √ätre court (2-3 phrases max)
- √ätre encourageant et personnalis√©
- Mentionner Ilium
- √ätre adapt√© au niveau scolaire

Exemple: "Bienvenue sur Ilium, Sarah ! En tant qu'√©l√®ve de Terminale, tu vas d√©couvrir des ressources qui t'aideront √† exceller dans tes √©tudes. Pr√™te √† commencer cette aventure d'apprentissage ?"
''';

      String? response = await _openaiService.makeBasicOpenAIRequest(prompt);
      
      if (response != null && response.trim().isNotEmpty) {
        return response.trim();
      }
      
      return _getDefaultWelcomeMessage(pseudo, niveau);
    } catch (e) {
      Logger.error('Erreur g√©n√©ration message de bienvenue', e);
      return _getDefaultWelcomeMessage(pseudo, niveau);
    }
  }
  
  /// Valide et corrige le pseudo de l'utilisateur
  Future<String> validateAndSuggestPseudo(String pseudo) async {
    try {
      // Si le pseudo est d√©j√† correct, le retourner
      if (_isPseudoValid(pseudo)) {
        return pseudo;
      }
      
      String prompt = '''
Corrige ce pseudo pour qu'il soit appropri√© pour une plateforme √©ducative: "$pseudo"

R√®gles:
- Garder l'esprit du pseudo original
- Supprimer les caract√®res inappropri√©s
- Maximum 20 caract√®res
- Pas de mots vulgaires ou inappropri√©s

R√©pondre UNIQUEMENT avec le pseudo corrig√©, rien d'autre.
''';

      String? response = await _openaiService.makeBasicOpenAIRequest(prompt);
      
      if (response != null && _isPseudoValid(response.trim())) {
        return response.trim();
      }
      
      return _sanitizePseudo(pseudo);
    } catch (e) {
      Logger.error('Erreur validation pseudo', e);
      return _sanitizePseudo(pseudo);
    }
  }
  
  // M√©thodes utilitaires priv√©es
  
  List<String> _parseSpecialitySuggestions(String response) {
    List<String> suggestions = [];
    
    // Extraire les lignes qui commencent par un chiffre et un point
    RegExp lineRegex = RegExp(r'^\d+\.\s*(.+)$', multiLine: true);
    Iterable<RegExpMatch> matches = lineRegex.allMatches(response);
    
    for (RegExpMatch match in matches) {
      String? specialty = match.group(1)?.trim();
      if (specialty != null && specialty.isNotEmpty) {
        suggestions.add(specialty);
      }
    }
    
    return suggestions.take(3).toList();
  }
  
  List<String> _getDefaultSpecialitySuggestions(String niveau) {
    Map<String, List<String>> defaultSuggestions = {
      'Terminale': ['Math√©matiques', 'Physique-Chimie', 'SVT'],
      '1√®re': ['Math√©matiques', 'Fran√ßais', 'Histoire-G√©ographie'],
      '2nde': ['Math√©matiques', 'Fran√ßais', 'SVT'],
      // Ajouter d'autres niveaux si besoin
    };
    
    return defaultSuggestions[niveau] ?? ['Math√©matiques', 'Fran√ßais', 'Sciences'];
  }
  
  String _getDefaultWelcomeMessage(String pseudo, String niveau) {
    return 'Bienvenue sur Ilium, $pseudo ! En tant qu\'√©l√®ve de $niveau, tu vas d√©couvrir des ressources adapt√©es √† ton niveau. Pr√™t(e) √† commencer ?';
  }
  
  bool _isPseudoValid(String pseudo) {
    // R√®gles de validation basiques
    return pseudo.length >= 2 && 
           pseudo.length <= 20 && 
           RegExp(r'^[a-zA-Z0-9_-]+$').hasMatch(pseudo);
  }
  
  String _sanitizePseudo(String pseudo) {
    // Nettoyage basique du pseudo
    String cleaned = pseudo.replaceAll(RegExp(r'[^a-zA-Z0-9_-]'), '');
    if (cleaned.length < 2) cleaned = 'Utilisateur';
    if (cleaned.length > 20) cleaned = cleaned.substring(0, 20);
    return cleaned;
  }
  
  /// Valide si un niveau scolaire est correct
  bool _isValidNiveau(String niveau) {
    List<String> niveauxValides = [
      'CP', 'CE1', 'CE2', 'CM1', 'CM2',
      '6√®me', '5√®me', '4√®me', '3√®me',
      '2nde', '1√®re', 'Terminale',
      'Seconde', 'Premi√®re' // Variantes accept√©es
    ];
    return niveauxValides.contains(niveau.trim());
  }
  
  /// Correction de niveau hors ligne en cas d'√©chec de l'IA
  String _fallbackNiveauCorrection(String niveauSaisi) {
    String niveau = niveauSaisi.toLowerCase().trim();
    
    // Corrections communes
    Map<String, String> corrections = {
      'terminal': 'Terminale',
      'terminale': 'Terminale',
      'premiere': '1√®re',
      'premi√®re': '1√®re',
      'seconde': '2nde',
      '2nd': '2nde',
      'sixieme': '6√®me',
      'sixi√®me': '6√®me',
      'cinquieme': '5√®me',
      'cinqui√®me': '5√®me',
      'quatrieme': '4√®me',
      'quatri√®me': '4√®me',
      'troisieme': '3√®me',
      'troisi√®me': '3√®me',
    };
    
    if (corrections.containsKey(niveau)) {
      return corrections[niveau]!;
    }
    
    // Recherche par similarit√© basique
    if (niveau.contains('term')) return 'Terminale';
    if (niveau.contains('prem')) return '1√®re';
    if (niveau.contains('sec')) return '2nde';
    if (niveau.contains('6')) return '6√®me';
    if (niveau.contains('5')) return '5√®me';
    if (niveau.contains('4')) return '4√®me';
    if (niveau.contains('3')) return '3√®me';
    
    // Par d√©faut
    return 'Terminale';
  }
  
  /// Parse les sp√©cialit√©s format√©es par l'IA
  List<String> _parseFormattedSpecialites(String response) {
    List<String> specialites = [];
    
    // Diviser par lignes et nettoyer
    List<String> lignes = response.split('\n');
    
    for (String ligne in lignes) {
      String specialite = ligne.trim();
      
      // Ignorer les lignes vides ou de formatage
      if (specialite.isEmpty || 
          specialite.startsWith('Format') || 
          specialite.startsWith('R√®gles') ||
          specialite.contains(':')) {
        continue;
      }
      
      // Nettoyer les puces ou num√©ros
      specialite = specialite.replaceAll(RegExp(r'^[‚Ä¢\-\*\d\.\s]+'), '');
      
      if (specialite.isNotEmpty && specialite.length > 2) {
        specialites.add(specialite);
      }
    }
    
    return specialites.take(5).toList(); // Limite √† 5 sp√©cialit√©s
  }
  
  /// Correction de sp√©cialit√©s hors ligne
  List<String> _fallbackSpecialitesCorrection(List<String> specialitesSaisies, String niveau) {
    List<String> specialitesCorrigees = [];
    
    Map<String, String> corrections = {
      'maths': 'Math√©matiques',
      'mathematiques': 'Math√©matiques',
      'math': 'Math√©matiques',
      'physique': 'Physique-Chimie',
      'chimie': 'Physique-Chimie',
      'phys': 'Physique-Chimie',
      'bio': 'SVT',
      'biologie': 'SVT',
      'sciences': 'SVT',
      'informatique': 'NSI',
      'info': 'NSI',
      'nsi': 'NSI',
      'si': 'SI',
      'anglais': 'Anglais',
      'espagnol': 'Espagnol',
      'allemand': 'Allemand',
      'histoire': 'Histoire-G√©ographie',
      'geo': 'Histoire-G√©ographie',
      'geographie': 'Histoire-G√©ographie',
      'ses': 'SES',
      'economie': 'SES',
      'fran√ßais': 'Fran√ßais',
      'francais': 'Fran√ßais',
      'philo': 'Philosophie',
      'philosophie': 'Philosophie',
    };
    
    for (String specialite in specialitesSaisies) {
      String specialiteNormalisee = specialite.toLowerCase().trim();
      
      if (corrections.containsKey(specialiteNormalisee)) {
        specialitesCorrigees.add(corrections[specialiteNormalisee]!);
      } else {
        // Capitaliser la premi√®re lettre si pas de correspondance
        String corrigee = specialite.trim();
        if (corrigee.isNotEmpty) {
          corrigee = corrigee[0].toUpperCase() + corrigee.substring(1).toLowerCase();
          specialitesCorrigees.add(corrigee);
        }
      }
    }
    
    return specialitesCorrigees;
  }
  
  /// G√©n√®re une r√©ponse conversationnelle par d√©faut
  String _getDefaultConversationalResponse(String etapeInscription) {
    Map<String, String> reponsesParDefaut = {
      'niveau': 'Super ! Et quelles sont tes mati√®res pr√©f√©r√©es ou sp√©cialit√©s ?',
      'specialites': 'Excellent choix ! Maintenant, quel pseudo aimerais-tu utiliser sur Ilium ?',
      'pseudo': 'Parfait ! Ton profil est presque pr√™t. Encore un instant... üöÄ',
      'bienvenue': 'Bienvenue dans la communaut√© Ilium ! Pr√™t(e) √† d√©couvrir une nouvelle fa√ßon d\'apprendre ?',
    };
    
    return reponsesParDefaut[etapeInscription] ?? 
           'Merci pour ces informations ! Continuons ensemble... üòä';
  }
}