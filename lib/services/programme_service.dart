import '../models/programme_model.dart';
import '../services/openai_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../utils/logger.dart';
import '../utils/text_normalizer.dart';
import '../config/api_config.dart';

/// Service pour g√©rer les programmes scolaires
class ProgrammeService {
  final OpenAIService _openAIService = OpenAIService();
  
  /// Collections Firebase pour les programmes
  static const String _collection = 'programme';
  static const String _collectionMatiere = 'programme_matiere'; // Programmes d√©taill√©s par mati√®re
  
  /// R√©cup√®re un programme existant ou le g√©n√®re si n√©cessaire
  Future<ProgrammeModel?> getProgramme({
    required String matiere,
    required String niveau,
    List<String>? options,
    int? annee,
  }) async {
    annee ??= DateTime.now().year; // Ann√©e courante par d√©faut
    final searchOptions = options ?? [];
    
    // NORMALISER les entr√©es pour √©viter les doublons
    final normalizedMatiere = TextNormalizer.normalizeMatiere(matiere);
    final normalizedNiveau = TextNormalizer.normalizeNiveau(niveau);
    
    try {
      // 1. Chercher un programme existant dans Firebase avec les m√™mes options
      final programmeId = ProgrammeModel.generateId(normalizedMatiere, normalizedNiveau, annee, options: searchOptions);
      final existingProgramme = await _getProgrammeFromFirestore(programmeId);
      
      if (existingProgramme != null) {
        Logger.info('Programme trouv√© dans Firebase: $programmeId');
        return existingProgramme;
      }
      
      // 2. Aucun programme trouv√©, g√©n√©rer avec ChatGPT
      Logger.info('G√©n√©ration nouveau programme: $normalizedMatiere - $normalizedNiveau - $annee - options: $searchOptions');
      return await _generateProgramme(normalizedMatiere, normalizedNiveau, annee, searchOptions);
      
    } catch (e) {
      Logger.error('Erreur r√©cup√©ration programme: $e');
      return null;
    }
  }
  
  /// R√©cup√®re un programme depuis Firestore
  Future<ProgrammeModel?> _getProgrammeFromFirestore(String programmeId) async {
    try {
      final doc = await FirebaseFirestore.instance
          .collection(_collection)
          .doc(programmeId)
          .get();
      
      if (doc.exists) {
        return ProgrammeModel.fromFirestore(doc);
      }
      return null;
    } catch (e) {
      Logger.error('Erreur lecture Firestore: $e');
      return null;
    }
  }
  
  /// G√©n√®re un programme avec ChatGPT et le sauvegarde
  Future<ProgrammeModel?> _generateProgramme(String matiere, String niveau, int annee, List<String> options) async {
    try {
      Logger.info('_generateProgramme appel√© avec: $matiere, $niveau, $annee, ${options.join(',')}');
      // Cr√©er le prompt pour ChatGPT (les options sont uniquement pour le contexte)
      final prompt = _buildProgrammePrompt(matiere, niveau, annee, options);
      
      // Appeler ChatGPT
      final response = await _openAIService.makeOpenAIRequest(prompt);
      
      if (response != null && response.isNotEmpty) {
        // Extraire les chapitres du contenu g√©n√©r√©
        final chapitres = _extractChapitres(response);
        
        // Cr√©er le mod√®le de programme avec les nouvelles options
        final programme = ProgrammeModel(
          id: ProgrammeModel.generateId(matiere, niveau, annee, options: options),
          matiere: matiere,
          niveau: niveau,
          options: options,
          annee: annee,
          contenu: response,
          chapitres: chapitres,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
          source: 'generated',
          tags: ProgrammeModel.generateTags(matiere, niveau, options),
          metadata: {
            'generated_by': 'openai',
            'model': 'gpt-5',
            'prompt_version': '1.0',
            'options': options,
          },
        );
        
        // Sauvegarder dans Firebase
        await _saveProgrammeToFirestore(programme);
        
        Logger.info('Programme g√©n√©r√© et sauvegard√©: ${programme.id}');
        return programme;
      }
      
      return null;
    } catch (e) {
      Logger.error('Erreur g√©n√©ration programme: $e');
      return null;
    }
  }
  
  /// Construit le prompt pour ChatGPT
  String _buildProgrammePrompt(String matiere, String niveau, int annee, List<String> options) {
    String optionsContext = '';
    if (options.isNotEmpty) {
      optionsContext = '\n\nContexte : L\'√©tudiant a choisi les sp√©cialit√©s suivantes : ${options.join(', ')}. Cela peut l√©g√®rement influencer le style p√©dagogique mais le programme de $matiere reste officiel et inchang√©.';
    }

    return '''
G√©n√®re UNIQUEMENT la liste des cours du programme scolaire officiel fran√ßais pour $matiere en classe de $niveau pour l'ann√©e scolaire $annee-${annee + 1}.

Instructions IMPORTANTES :
- Suis exactement le programme officiel de l'√âducation Nationale fran√ßaise
- G√©n√®re SEULEMENT les titres des cours/chapitres, sans contenu d√©taill√©
- Format : liste simple avec tirets (-)
- Pas de descriptions longues, juste les titres
- Maximum 15-20 cours par programme
- Titres courts et pr√©cis (2-8 mots maximum)$optionsContext

Exemple de format EXACT √† suivre :
- Les nombres entiers
- Fractions et nombres d√©cimaux
- G√©om√©trie dans l'espace
- Proportionnalit√©
- Statistiques et probabilit√©s
- Equations du premier degr√©
- Fonctions lin√©aires

G√©n√®re maintenant UNIQUEMENT la liste des titres de cours pour $matiere - $niveau :
''';
  }
  
  /// Extrait la liste des chapitres depuis le contenu g√©n√©r√©
  List<String> _extractChapitres(String contenu) {
    final List<String> chapitres = [];
    
    Logger.info('Extraction chapitres depuis: ${contenu.substring(0, contenu.length > 200 ? 200 : contenu.length)}...');
    
    // Extraire les √©l√©ments avec puces (‚Ä¢) d'abord
    final RegExp bulletRegex = RegExp(r'^‚Ä¢\s+(.+)$', multiLine: true);
    final bulletMatches = bulletRegex.allMatches(contenu);
    
    for (final match in bulletMatches) {
      final item = match.group(1)?.trim();
      if (item != null && item.isNotEmpty) {
        // Nettoyer le titre et supprimer les dates
        final titreClean = _cleanChapterTitle(item);
        if (titreClean.isNotEmpty && titreClean.length <= 150) {
          chapitres.add(titreClean);
          Logger.info('Chapitre extrait: $titreClean');
        }
      }
    }
    
    // Si aucun chapitre avec puces trouv√©, essayer les tirets
    if (chapitres.isEmpty) {
      final RegExp listRegex = RegExp(r'^-\s+(.+)$', multiLine: true);
      final listMatches = listRegex.allMatches(contenu);
      
      for (final match in listMatches) {
        final item = match.group(1)?.trim();
        if (item != null && item.isNotEmpty) {
          final titreClean = _cleanChapterTitle(item);
          if (titreClean.isNotEmpty && titreClean.length <= 150) {
            chapitres.add(titreClean);
            Logger.info('Chapitre extrait (tiret): $titreClean');
          }
        }
      }
    }
    
    // Si aucun chapitre avec tirets trouv√©, essayer les num√©ros
    if (chapitres.isEmpty) {
      final RegExp numberedRegex = RegExp(r'^\d+\.\s+(.+)$', multiLine: true);
      final numberedMatches = numberedRegex.allMatches(contenu);
      
      for (final match in numberedMatches) {
        final item = match.group(1)?.trim();
        if (item != null && item.isNotEmpty && item.length <= 100) {
          final titreClean = _cleanChapterTitle(item);
          chapitres.add(titreClean);
        }
      }
    }
    
    // Fallback : extraire les titres de section (## ou ###)
    if (chapitres.isEmpty) {
      final RegExp chapterRegex = RegExp(r'^#{2,3}\s+(.+)$', multiLine: true);
      final matches = chapterRegex.allMatches(contenu);
      
      for (final match in matches) {
        final titre = match.group(1)?.trim();
        if (titre != null && titre.isNotEmpty) {
          final titreClean = _cleanChapterTitle(titre);
          if (titreClean.isNotEmpty) {
            chapitres.add(titreClean);
          }
        }
      }
    }
    
    return chapitres;
  }
  
  /// Nettoie un titre de chapitre en supprimant les r√©f√©rences temporelles et les pr√©fixes
  String _cleanChapterTitle(String title) {
    Logger.debug('üßπ Nettoyage du titre: "$title"');
    
    String cleanedTitle = title
        // Supprimer les pr√©fixes de chapitres/cours
        .replaceFirst(RegExp(r'^(Cours|Chapitre|Le√ßon|Th√®me|Partie)\s+\d+\s*:\s*'), '')
        // Supprimer les mentions temporelles entre parenth√®ses avec mois
        .replaceAll(RegExp(r'\s*\([^)]*(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)[^)]*\)', caseSensitive: false), '')
        // Supprimer les mentions de trimestre/semestre
        .replaceAll(RegExp(r'\s*\([^)]*(?:trimestre|semestre|quadrimestre)[^)]*\)', caseSensitive: false), '')
        // Supprimer les tirets avec dates (ex: "- septembre √† octobre", "- de janvier √† mars")
        .replaceAll(RegExp(r'\s*-\s*(?:de\s+)?(?:\b(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\b).*', caseSensitive: false), '')
        // Supprimer les mentions temporelles g√©n√©riques
        .replaceAll(RegExp(r'\s*\(.*(?:d√©but|fin|milieu).*(?:ann√©e|trimestre).*\)', caseSensitive: false), '')
        // Supprimer les mentions de p√©riodes num√©riques (1er trimestre, 2√®me semestre, etc.)
        .replaceAll(RegExp(r'\s*\([^)]*(?:\d+(?:er|√®re|√®me|e)?\s*(?:trimestre|semestre))[^)]*\)', caseSensitive: false), '')
        // Supprimer les ranges de mois avec "√†" (janvier √† mars, septembre-octobre, etc.)
        // Utiliser des d√©limiteurs pour √©viter de supprimer des parties de mots
        .replaceAll(RegExp(r'\s*(?:\()?(?:\b(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\b)\s*(?:[-√†]\s*(?:\b(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\b))?(?:\))?', caseSensitive: false), '')
        .trim();
    
    // Supprimer les caract√®res de fin ind√©sirables
    cleanedTitle = cleanedTitle.replaceAll(RegExp(r'[:\-\.]$'), '').trim();
    
    if (cleanedTitle != title) {
      Logger.info('üßπ Titre nettoy√©: "$title" ‚Üí "$cleanedTitle"');
    }
    
    return cleanedTitle;
  }
  
  /// Sauvegarde un programme dans Firestore
  Future<bool> _saveProgrammeToFirestore(ProgrammeModel programme) async {
    try {
      await FirebaseFirestore.instance
          .collection(_collection)
          .doc(programme.id)
          .set(programme.toFirestore());
      return true;
    } catch (e) {
      Logger.error('Erreur sauvegarde programme: $e');
      return false;
    }
  }
  
  /// Force la r√©g√©n√©ration d'un programme
  Future<ProgrammeModel?> regenerateProgramme({
    required String matiere,
    required String niveau,
    List<String>? options,
    int? annee,
  }) async {
    annee ??= DateTime.now().year;
    
    // NORMALISER les entr√©es pour √©viter les doublons
    final normalizedMatiere = TextNormalizer.normalizeMatiere(matiere);
    final normalizedNiveau = TextNormalizer.normalizeNiveau(niveau);
    
    try {
      // Supprimer l'ancien programme s'il existe
      final searchOptions = options ?? [];
      final programmeId = ProgrammeModel.generateId(normalizedMatiere, normalizedNiveau, annee, options: searchOptions);
      await FirebaseFirestore.instance
          .collection(_collection)
          .doc(programmeId)
          .delete();
      
      // G√©n√©rer un nouveau programme
      return await _generateProgramme(normalizedMatiere, normalizedNiveau, annee, searchOptions);
    } catch (e) {
      Logger.error('Erreur r√©g√©n√©ration programme: $e');
      return null;
    }
  }
  
  /// V√©rifie si un programme existe pour une mati√®re/niveau/ann√©e
  Future<bool> programmeExists({
    required String matiere,
    required String niveau,
    List<String>? options,
    int? annee,
  }) async {
    annee ??= DateTime.now().year;
    
    // NORMALISER les entr√©es pour √©viter les doublons
    final normalizedMatiere = TextNormalizer.normalizeMatiere(matiere);
    final normalizedNiveau = TextNormalizer.normalizeNiveau(niveau);
    
    try {
      final searchOptions = options ?? [];
      final programmeId = ProgrammeModel.generateId(normalizedMatiere, normalizedNiveau, annee, options: searchOptions);
      final doc = await FirebaseFirestore.instance
          .collection(_collection)
          .doc(programmeId)
          .get();
      return doc.exists;
    } catch (e) {
      return false;
    }
  }
  
  /// Retourne la liste des mati√®res disponibles
  List<String> getAvailableSubjects() {
    return [
      'Math√©matiques',
      'Fran√ßais',
      'Histoire-G√©ographie',
      'Physique-Chimie',
      'SVT',
      'Anglais',
      'Espagnol',
      'Allemand',
      'Philosophie',
      '√âconomie',
      'Sciences',
      'Arts plastiques',
      'Musique',
      'EPS',
    ];
  }
  
  /// Retourne la liste des niveaux disponibles
  List<String> getAvailableLevels() {
    return [
      '6√®me',
      '5√®me', 
      '4√®me',
      '3√®me',
      '2nde',
      '1√®re G√©n√©rale',
      '1√®re STMG',
      '1√®re STI2D',
      '1√®re STL',
      '1√®re ST2S',
      'Terminale G√©n√©rale',
      'Terminale STMG',
      'Terminale STI2D',
      'Terminale STL',
      'Terminale ST2S',
    ];
  }
  
  /// Retourne les sp√©cialit√©s disponibles pour 1√®re et Terminale G√©n√©rale
  List<String> getAvailableSpecialities(String niveau) {
    if (niveau == '1√®re G√©n√©rale' || niveau == 'Terminale G√©n√©rale') {
      return [
        'Math√©matiques',
        'Physique-Chimie',
        'SVT',
        'Histoire-G√©ographie',
        'SES',
        'Anglais',
        'Espagnol',
        'Allemand',
        'Philosophie',
        'Arts plastiques',
        'Musique',
        'NSI',
        'SI',
      ];
    }
    return [];
  }
  
  /// Recherche des programmes existants par tags (sp√©cialit√©s similaires)
  Future<List<ProgrammeModel>> searchProgrammesByTags({
    required String matiere,
    required String niveau,
    required List<String> userOptions,
    int? annee,
  }) async {
    annee ??= DateTime.now().year;
    
    try {
      // Cr√©er les tags de recherche bas√©s sur les sp√©cialit√©s de l'utilisateur
      final searchTags = ProgrammeModel.generateTags(matiere, niveau, userOptions);
      
      // Rechercher dans Firestore les programmes ayant des tags similaires
      // Simplifier la requ√™te pour √©viter les erreurs d'index
      final querySnapshot = await FirebaseFirestore.instance
          .collection(_collection)
          .where('matiere', isEqualTo: matiere)
          .where('niveau', isEqualTo: niveau)
          .where('annee', isEqualTo: annee)
          .limit(10)
          .get();
      
      // Filtrer les r√©sultats pour ne garder que ceux avec des tags compatibles
      final programmes = querySnapshot.docs
          .map((doc) => ProgrammeModel.fromFirestore(doc))
          .where((programme) {
            // V√©rifier si le programme a des tags en commun avec les sp√©cialit√©s de l'utilisateur
            if (userOptions.isEmpty) return true;
            return programme.tags.any((tag) => 
                searchTags.contains(tag) || userOptions.any((option) => 
                    tag.toLowerCase().contains(option.toLowerCase())));
          })
          .toList();
      
      // Trier par nombre de sp√©cialit√©s en commun
      programmes.sort((a, b) {
        int scoreA = _calculateCompatibilityScore(a, userOptions);
        int scoreB = _calculateCompatibilityScore(b, userOptions);
        return scoreB.compareTo(scoreA);
      });
      
      return programmes.take(5).toList();
    } catch (e) {
      Logger.error('Erreur recherche programmes par tags: $e');
      return [];
    }
  }
  
  /// R√©cup√®re un programme optimis√© en tenant compte des sp√©cialit√©s de l'utilisateur
  /// Essaie d'abord de trouver un programme exact, puis un similaire, sinon g√©n√®re
  Future<ProgrammeModel?> getProgrammeOptimized({
    required String matiere,
    required String niveau,
    required List<String> userOptions,
    int? annee,
  }) async {
    annee ??= DateTime.now().year;
    final normalizedMatiere = TextNormalizer.normalizeMatiere(matiere);
    final normalizedNiveau = TextNormalizer.normalizeNiveau(niveau);
    
    try {
      Logger.info('getProgrammeOptimized: $normalizedMatiere, $normalizedNiveau, ${userOptions.join(', ')}');
      
      // 1. Chercher un programme exact avec les m√™mes sp√©cialit√©s
      try {
        final exactProgramme = await getProgramme(
          matiere: normalizedMatiere,
          niveau: normalizedNiveau,
          options: userOptions,
          annee: annee,
        );
        
        if (exactProgramme != null) {
          Logger.info('Programme exact trouv√© avec sp√©cialit√©s: ${userOptions.join(', ')}');
          return exactProgramme;
        }
      } catch (e) {
        Logger.warning('Erreur recherche programme exact: $e');
      }
      
      // 2. Chercher des programmes similaires avec sp√©cialit√©s compatibles
      try {
        final similarProgrammes = await searchProgrammesByTags(
          matiere: normalizedMatiere,
          niveau: normalizedNiveau,
          userOptions: userOptions,
          annee: annee,
        );
        
        if (similarProgrammes.isNotEmpty) {
          Logger.info('Programme similaire trouv√© avec sp√©cialit√©s compatibles');
          // Prendre le plus r√©cent qui a le plus de tags en commun
          final bestMatch = _findBestMatch(similarProgrammes, userOptions);
          if (bestMatch != null) {
            return bestMatch;
          }
        }
      } catch (e) {
        Logger.warning('Erreur recherche programmes similaires: $e');
      }
      
      // 3. G√©n√©rer un nouveau programme avec les sp√©cialit√©s de l'utilisateur
      Logger.info('G√©n√©ration nouveau programme avec sp√©cialit√©s: ${userOptions.join(', ')}');
      return await _generateProgramme(normalizedMatiere, normalizedNiveau, annee, userOptions);
      
    } catch (e) {
      Logger.error('Erreur getProgrammeOptimized: $e');
      return null;
    }
  }
  
  /// Trouve le meilleur programme correspondant aux sp√©cialit√©s de l'utilisateur
  ProgrammeModel? _findBestMatch(List<ProgrammeModel> programmes, List<String> userOptions) {
    if (programmes.isEmpty) return null;
    
    ProgrammeModel? bestMatch;
    int bestScore = 0;
    
    for (final programme in programmes) {
      // Calculer le score de correspondance bas√© sur les sp√©cialit√©s communes
      int score = 0;
      for (final option in userOptions) {
        if (programme.options.contains(option) || 
            programme.tags.contains(option.toLowerCase())) {
          score++;
        }
      }
      
      if (score > bestScore) {
        bestScore = score;
        bestMatch = programme;
      }
    }
    
    return bestMatch;
  }
  
  /// Calcule le score de compatibilit√© entre un programme et les sp√©cialit√©s utilisateur
  int _calculateCompatibilityScore(ProgrammeModel programme, List<String> userOptions) {
    if (userOptions.isEmpty) return 0;
    
    int score = 0;
    for (final option in userOptions) {
      // Score pour correspondance exacte dans les options
      if (programme.options.contains(option)) {
        score += 3;
      }
      // Score pour correspondance dans les tags
      else if (programme.tags.any((tag) => tag.toLowerCase() == option.toLowerCase())) {
        score += 2;
      }
      // Score pour correspondance partielle
      else if (programme.tags.any((tag) => tag.toLowerCase().contains(option.toLowerCase()))) {
        score += 1;
      }
    }
    return score;
  }

  // ===== NOUVEAU SYST√àME DE G√âN√âRATION √Ä 2 NIVEAUX =====

  /// G√©n√®re ou r√©cup√®re le programme complet (niveau 1 - mati√®res seulement)
  Future<ProgrammeModel?> getProgrammeComplet({
    required String niveau,
    required List<String> options,
    int? annee,
  }) async {
    annee ??= DateTime.now().year;
    
    // Normaliser le niveau
    final normalizedNiveau = TextNormalizer.normalizeNiveau(niveau);
    
    try {
      // 1. Chercher le programme complet existant
      final programmeId = _generateCompleteProgrammeId(normalizedNiveau, annee, options);
      Logger.debug('üîç Recherche programme existant avec ID: $programmeId');
      
      final existingProgramme = await _getProgrammeFromFirestore(programmeId);
      
      if (existingProgramme != null) {
        Logger.info('‚úÖ Programme complet trouv√© en cache: $programmeId');
        Logger.debug('üìä Programme contient ${existingProgramme.chapitres.length} mati√®res');
        return existingProgramme;
      }
      
      // 2. G√©n√©rer le programme complet (mati√®res seulement)
      Logger.info('üöÄ G√©n√©ration nouveau programme: $normalizedNiveau - $annee - options: ${options.join(',')}');
      final newProgramme = await _generateProgrammeComplet(normalizedNiveau, annee, options);
      
      if (newProgramme != null) {
        Logger.info('‚úÖ Nouveau programme g√©n√©r√© avec ${newProgramme.chapitres.length} mati√®res');
      } else {
        Logger.warning('‚ö†Ô∏è √âchec de g√©n√©ration du programme');
      }
      
      return newProgramme;
      
    } catch (e) {
      Logger.error('Erreur getProgrammeComplet: $e');
      return null;
    }
  }

  /// G√©n√®re ou r√©cup√®re le programme d√©taill√© d'une mati√®re (niveau 2)
  Future<ProgrammeModel?> getProgrammeMatiere({
    required String matiere,
    required String niveau,
    required List<String> options,
    int? annee,
  }) async {
    annee ??= DateTime.now().year;
    
    // Normaliser les entr√©es
    final normalizedMatiere = TextNormalizer.normalizeMatiere(matiere);
    final normalizedNiveau = TextNormalizer.normalizeNiveau(niveau);
    
    try {
      // 1. Chercher le programme mati√®re existant
      final programmeId = _generateMatiereProgrammeId(normalizedMatiere, normalizedNiveau, annee, options);
      final existingProgramme = await _getProgrammeMatiereFromFirestore(programmeId);
      
      if (existingProgramme != null) {
        Logger.info('Programme mati√®re trouv√©: $programmeId');
        return existingProgramme;
      }
      
      // 2. G√©n√©rer le programme d√©taill√© de la mati√®re
      Logger.info('G√©n√©ration programme mati√®re: $normalizedMatiere - $normalizedNiveau - $annee');
      return await _generateProgrammeMatiere(normalizedMatiere, normalizedNiveau, annee, options);
      
    } catch (e) {
      Logger.error('Erreur getProgrammeMatiere: $e');
      return null;
    }
  }

  /// G√©n√®re le programme complet avec toutes les mati√®res
  Future<ProgrammeModel?> _generateProgrammeComplet(String niveau, int annee, List<String> options) async {
    try {
      Logger.info('G√©n√©ration programme complet pour: $niveau, options: ${options.join(', ')}');
      
      // DEBUG: V√©rifier la configuration OpenAI
      Logger.info('DEBUG - isOpenAIConfigured: ${ApiConfig.isOpenAIConfigured}');
      Logger.info('DEBUG - openaiApiKey length: ${ApiConfig.openaiApiKey.length}');
      Logger.info('DEBUG - openaiApiKey starts with sk-: ${ApiConfig.openaiApiKey.startsWith('sk-')}');
      Logger.info('DEBUG - openaiApiKey isEmpty: ${ApiConfig.openaiApiKey.isEmpty}');
      
      // Essayer d'utiliser l'API OpenAI d'abord
      Logger.info('DEBUG - Condition check: ${ApiConfig.isOpenAIConfigured}');
      if (ApiConfig.isOpenAIConfigured) {
        Logger.info('Tentative de g√©n√©ration avec OpenAI API...');
        final prompt = _buildCompleteProgrammePrompt(niveau, annee, options);
        final response = await _openAIService.makeOpenAIRequest(prompt);
        
        if (response != null && response.isNotEmpty) {
          Logger.info('R√©ponse OpenAI re√ßue: ${response.length} caract√®res');
          final chapitres = _extractMatieres(response);
          
          if (chapitres.isNotEmpty) {
            final programme = ProgrammeModel(
              id: _generateCompleteProgrammeId(niveau, annee, options),
              matiere: 'PROGRAMME_COMPLET',
              niveau: niveau,
              options: options,
              annee: annee,
              contenu: response,
              chapitres: chapitres,
              createdAt: DateTime.now(),
              updatedAt: DateTime.now(),
              source: 'generated_openai',
              tags: _generateCompleteProgrammeTags(niveau, options),
              metadata: {
                'generated_by': 'openai',
                'model': ApiConfig.openaiModel,
                'prompt_version': '2.0_complete',
                'type': 'programme_complet',
                'niveau': niveau,
                'options': options,
                'annee': annee,
              },
            );
            
            await _saveProgrammeToFirestore(programme);
            Logger.info('Programme complet OpenAI sauvegard√©: ${programme.id}');
            return programme;
          }
        }
      }
      
      // Fallback si OpenAI √©choue
      Logger.info('Utilisation du fallback avec mati√®res correctes');
      final fallbackMatieres = _getFallbackMatieresForNiveau(niveau, options);
      
      final programme = ProgrammeModel(
        id: _generateCompleteProgrammeId(niveau, annee, options),
        matiere: 'PROGRAMME_COMPLET', // Identifiant sp√©cial
        niveau: niveau,
        options: options,
        annee: annee,
        contenu: 'Mati√®res g√©n√©r√©es automatiquement:\n${fallbackMatieres.map((m) => '‚Ä¢ $m').join('\n')}',
        chapitres: fallbackMatieres,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        source: 'generated_fallback',
        tags: _generateCompleteProgrammeTags(niveau, options),
        metadata: {
          'generated_by': 'fallback',
          'model': 'manual',
          'prompt_version': '2.0_fallback',
          'type': 'programme_complet',
          'niveau': niveau,
          'options': options,
          'annee': annee,
        },
      );
      
      // Sauvegarder dans Firebase
      await _saveProgrammeToFirestore(programme);
      Logger.info('Programme complet fallback sauvegard√©: ${programme.id}');
      return programme;
      
    } catch (e) {
      Logger.error('Erreur g√©n√©ration programme complet: $e');
      return null;
    }
  }
  
  /// Chapitres de fallback selon la mati√®re et le niveau
  List<String> _getFallbackChapitresForMatiere(String matiere, String niveau, List<String> options) {
    final matiereNorm = matiere.toLowerCase();
    final niveauNorm = niveau.toLowerCase();
    
    if (matiereNorm.contains('math')) {
      if (niveauNorm.contains('terminale')) {
        return [
          'Limites et continuit√©',
          'D√©rivation',
          'Fonction logarithme',
          'Fonction exponentielle', 
          'Int√©gration',
          'G√©om√©trie dans l\'espace',
          'Suites num√©riques',
          'Probabilit√©s conditionnelles',
        ];
      } else if (niveauNorm.contains('1√®re')) {
        return [
          'Second degr√©',
          'D√©rivation',
          'Suites',
          'Probabilit√©s',
          'G√©om√©trie rep√©r√©e',
          'Trigonom√©trie',
        ];
      }
    } else if (matiereNorm.contains('fran') || matiereNorm.contains('fran√ßais')) {
      if (niveauNorm.contains('terminale')) {
        return [
          'La litt√©rature d\'id√©es',
          'Le th√©√¢tre',
          'La po√©sie moderne',
          'Le roman contemporain',
        ];
      } else if (niveauNorm.contains('1√®re')) {
        return [
          'Le roman et ses personnages',
          'Le th√©√¢tre classique',
          'La po√©sie',
          'L\'argumentation',
        ];
      }
    } else if (matiereNorm.contains('svt')) {
      if (niveauNorm.contains('terminale')) {
        return [
          'G√©n√©tique et √©volution',
          'G√©ologie',
          '√âcosyst√®mes',
          'Neurobiologie',
          'Immunologie',
        ];
      }
    } else if (matiereNorm.contains('phys') || matiereNorm.contains('chimie')) {
      if (niveauNorm.contains('terminale')) {
        return [
          'M√©canique',
          '√âlectricit√©',
          'Ondes',
          'Optique',
          'Chimie organique',
          'Thermodynamique',
        ];
      }
    } else if (matiereNorm.contains('hist') || matiereNorm.contains('g√©o')) {
      if (niveauNorm.contains('terminale')) {
        return [
          'La Seconde Guerre mondiale',
          'La guerre froide',
          'Mondialisation',
          'Territoires fran√ßais',
        ];
      }
    } else if (matiereNorm.contains('philo')) {
      if (niveauNorm.contains('terminale')) {
        return [
          'La conscience',
          'L\'inconscient',
          'Autrui',
          'Le d√©sir',
          'L\'existence et le temps',
          'La culture',
          'Le langage',
          'L\'art',
          'La justice',
          'L\'√âtat',
        ];
      }
    }
    
    // Fallback g√©n√©rique
    return [
      'Introduction √† $matiere',
      'Concepts fondamentaux',
      'M√©thodes et techniques',
      'Applications pratiques',
      'Exercices et r√©visions',
    ];
  }
  
  /// Mati√®res de fallback selon le niveau
  List<String> _getFallbackMatieresForNiveau(String niveau, List<String> options) {
    final niveauLower = niveau.toLowerCase();
    
    if (niveauLower.contains('terminale')) {
      final matieres = [
        'Fran√ßais',
        'Philosophie',
        'Histoire-G√©ographie',
        'Anglais',
        'Enseignement scientifique',
      ];
      
      // Ajouter les sp√©cialit√©s
      for (final option in options) {
        if (!matieres.contains(option)) {
          matieres.add(option);
        }
      }
      
      return matieres;
    } else if (niveauLower.contains('1√®re') || niveauLower.contains('premi√®re')) {
      final matieres = [
        'Fran√ßais',
        'Histoire-G√©ographie',
        'Anglais',
        'Enseignement scientifique',
        '√âducation physique et sportive',
      ];
      
      // Ajouter les sp√©cialit√©s
      for (final option in options) {
        if (!matieres.contains(option)) {
          matieres.add(option);
        }
      }
      
      return matieres;
    } else {
      return [
        'Math√©matiques',
        'Fran√ßais',
        'Histoire-G√©ographie',
        'Sciences',
        'Anglais',
      ];
    }
  }

  /// G√©n√®re le programme d√©taill√© d'une mati√®re
  Future<ProgrammeModel?> _generateProgrammeMatiere(String matiere, String niveau, int annee, List<String> options) async {
    try {
      Logger.info('G√©n√©ration programme mati√®re pour: $matiere - $niveau');
      
      // DEBUG: V√©rifier la configuration OpenAI pour les mati√®res aussi
      Logger.info('DEBUG MATIERE - isOpenAIConfigured: ${ApiConfig.isOpenAIConfigured}');
      
      // Essayer d'utiliser l'API OpenAI d'abord pour les mati√®res d√©taill√©es
      if (ApiConfig.isOpenAIConfigured) {
        Logger.info('Tentative de g√©n√©ration OpenAI pour mati√®re: $matiere');
        final prompt = _buildMatiereProgrammePrompt(matiere, niveau, annee, options);
        final response = await _openAIService.makeOpenAIRequest(prompt);
        
        if (response != null && response.isNotEmpty) {
          Logger.info('R√©ponse OpenAI mati√®re re√ßue: ${response.length} caract√®res');
          final chapitres = _extractChapitres(response);
          
          if (chapitres.isNotEmpty) {
            Logger.info('Chapitres OpenAI extraits: ${chapitres.length} chapitres');
            final programme = ProgrammeModel(
              id: _generateMatiereProgrammeId(matiere, niveau, annee, options),
              matiere: matiere,
              niveau: niveau,
              options: options,
              annee: annee,
              contenu: response,
              chapitres: chapitres,
              createdAt: DateTime.now(),
              updatedAt: DateTime.now(),
              source: 'generated_openai_matiere',
              tags: _generateMatiereProgrammeTags(matiere, niveau, options),
              metadata: {
                'generated_by': 'openai',
                'model': ApiConfig.openaiModel,
                'prompt_version': '2.0_matiere',
                'type': 'programme_matiere',
                'matiere': matiere,
                'niveau': niveau,
                'options': options,
                'annee': annee,
              },
            );
            
            await _saveProgrammeMatiereToFirestore(programme);
            Logger.info('Programme mati√®re OpenAI sauvegard√©: ${programme.id}');
            return programme;
          }
        }
      }
      
      // Fallback si OpenAI √©choue
      Logger.info('Utilisation du fallback avec chapitres sp√©cifiques √† la mati√®re');
      final fallbackChapitres = _getFallbackChapitresForMatiere(matiere, niveau, options);
      
      final programme = ProgrammeModel(
        id: _generateMatiereProgrammeId(matiere, niveau, annee, options),
        matiere: matiere,
        niveau: niveau,
        options: options,
        annee: annee,
        contenu: 'Programme d√©taill√© de $matiere ($niveau):\n${fallbackChapitres.map((c) => '‚Ä¢ $c').join('\n')}',
        chapitres: fallbackChapitres,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        source: 'generated_fallback_matiere',
        tags: _generateMatiereProgrammeTags(matiere, niveau, options),
        metadata: {
          'generated_by': 'fallback',
          'model': 'manual',
          'prompt_version': '2.0_fallback_matiere',
          'type': 'programme_matiere',
          'matiere': matiere,
          'niveau': niveau,
          'options': options,
          'annee': annee,
        },
      );
      
      // Sauvegarder dans la collection sp√©cialis√©e
      await _saveProgrammeMatiereToFirestore(programme);
      Logger.info('Programme mati√®re fallback sauvegard√©: ${programme.id}');
      
      return programme;
    } catch (e) {
      Logger.error('Erreur g√©n√©ration programme mati√®re: $e');
      return null;
    }
  }

  // ===== M√âTHODES UTILITAIRES POUR LE NOUVEAU SYST√àME =====

  String _generateCompleteProgrammeId(String niveau, int annee, List<String> options) {
    final optionsStr = options.isEmpty ? 'no_options' : options.join('_').toLowerCase();
    return 'complete_${niveau.toLowerCase()}_${annee}_$optionsStr';
  }

  String _generateMatiereProgrammeId(String matiere, String niveau, int annee, List<String> options) {
    final optionsStr = options.isEmpty ? 'no_options' : options.join('_').toLowerCase();
    return 'matiere_${matiere.toLowerCase()}_${niveau.toLowerCase()}_${annee}_$optionsStr';
  }

  Future<ProgrammeModel?> _getProgrammeMatiereFromFirestore(String programmeId) async {
    try {
      final doc = await FirebaseFirestore.instance
          .collection(_collectionMatiere)
          .doc(programmeId)
          .get();
      
      if (doc.exists) {
        return ProgrammeModel.fromFirestore(doc);
      }
      return null;
    } catch (e) {
      Logger.error('Erreur lecture Firestore mati√®re: $e');
      return null;
    }
  }

  Future<void> _saveProgrammeMatiereToFirestore(ProgrammeModel programme) async {
    try {
      await FirebaseFirestore.instance
          .collection(_collectionMatiere)
          .doc(programme.id)
          .set(programme.toFirestore());
    } catch (e) {
      Logger.error('Erreur sauvegarde programme mati√®re: $e');
      rethrow;
    }
  }

  List<String> _generateCompleteProgrammeTags(String niveau, List<String> options) {
    final tags = <String>[
      'programme_complet',
      'programme_general',
      niveau.toLowerCase(),
      'annee_${DateTime.now().year}',
      'niveau_$niveau',
      'toutes_matieres',
      'cursus_complet',
    ];
    
    // Ajouter UNIQUEMENT les sp√©cialit√©s choisies par l'√©l√®ve (pas les mati√®res du programme)
    for (final option in options) {
      // Pr√©fixer avec "specialite_" pour √©viter la confusion avec les recherches de mati√®res individuelles
      tags.add('specialite_${option.toLowerCase().replaceAll(' ', '_')}');
      tags.add('option_${option.toLowerCase().replaceAll(' ', '_')}');
    }
    
    return tags;
  }

  List<String> _generateMatiereProgrammeTags(String matiere, String niveau, List<String> options) {
    final tags = <String>[
      'programme_matiere',
      matiere.toLowerCase().replaceAll(' ', '_'),
      niveau.toLowerCase(),
      'annee_${DateTime.now().year}',
      'matiere_$matiere',
      'niveau_$niveau',
    ];
    
    // Ajouter les options/sp√©cialit√©s aux tags
    for (final option in options) {
      tags.add(option.toLowerCase().replaceAll(' ', '_'));
      tags.add('specialite_${option.toLowerCase().replaceAll(' ', '_')}');
      tags.add('${matiere.toLowerCase()}_${option.toLowerCase().replaceAll(' ', '_')}');
    }
    
    return tags;
  }

  List<String> _extractMatieres(String content) {
    // Extraire les mati√®res du contenu g√©n√©r√© (niveau 1)
    Logger.info('Contenu re√ßu pour extraction mati√®res: $content');
    
    final lines = content.split('\n');
    final matieres = <String>[];
    
    for (final line in lines) {
      final trimmed = line.trim();
      if (trimmed.isNotEmpty && 
          (trimmed.startsWith('‚Ä¢') || 
           trimmed.startsWith('-') || 
           trimmed.startsWith('*') ||
           trimmed.startsWith('üìö'))) {
        // Nettoyer la ligne pour extraire le nom de la mati√®re
        final matiere = trimmed
            .replaceAll(RegExp(r'^[‚Ä¢\-\*üìö]\s*'), '')
            .split(':')[0]
            .trim();
        if (matiere.isNotEmpty && matiere.length < 50) { // √âviter les lignes trop longues
          matieres.add(matiere);
          Logger.info('Mati√®re extraite: $matiere');
        }
      }
    }
    
    // Fallback si aucune mati√®re extraite
    if (matieres.isEmpty) {
      Logger.warning('Aucune mati√®re extraite, tentative fallback');
      // Essayer d'extraire sans formatage sp√©cial
      for (final line in lines) {
        final trimmed = line.trim();
        if (trimmed.isNotEmpty && 
            trimmed.length > 3 && 
            trimmed.length < 50 &&
            !trimmed.toLowerCase().contains('g√©n√®re') &&
            !trimmed.toLowerCase().contains('instruction') &&
            !trimmed.toLowerCase().contains('exemple')) {
          matieres.add(trimmed);
          Logger.info('Mati√®re fallback extraite: $trimmed');
        }
      }
    }
    
    Logger.info('Mati√®res finales extraites: ${matieres.join(', ')}');
    return matieres;
  }

  String _buildCompleteProgrammePrompt(String niveau, int annee, List<String> options) {
    final optionsStr = options.isEmpty ? '' : '\nSp√©cialit√©s/Options de l\'√©l√®ve : ${options.join(', ')}';
    
    return '''Vous √™tes un expert du syst√®me √©ducatif fran√ßais. Je veux SEULEMENT la liste des mati√®res (pas les d√©tails) pour un √©l√®ve de $niveau.${optionsStr.isEmpty ? '' : optionsStr}

CONSIGNE : R√©pondez UNIQUEMENT avec la liste des mati√®res, une par ligne, avec ‚Ä¢ devant chaque mati√®re.

Pour un √©l√®ve de Terminale avec sp√©cialit√©s SVT et Maths, la r√©ponse correcte serait :
‚Ä¢ Fran√ßais
‚Ä¢ Philosophie  
‚Ä¢ Histoire-G√©ographie
‚Ä¢ Anglais
‚Ä¢ Math√©matiques
‚Ä¢ SVT
‚Ä¢ Enseignement scientifique

Maintenant, donnez-moi la liste des mati√®res pour $niveau${optionsStr.isEmpty ? '' : ' avec les sp√©cialit√©s: ${options.join(', ')}'}:''';
  }

  String _buildMatiereProgrammePrompt(String matiere, String niveau, int annee, List<String> options) {
    final optionsStr = options.isEmpty ? '' : '\nSp√©cialit√©s/Options : ${options.join(', ')}';
    
    return '''Tu es un expert en √©ducation fran√ßaise. G√©n√®re le programme D√âTAILL√â de $matiere pour un √©l√®ve de $niveau.

Mati√®re : $matiere
Niveau : $niveau$optionsStr

Instructions importantes :
1. D√©taille tous les chapitres et th√®mes du programme officiel
2. Tiens compte des sp√©cialit√©s pour adapter le contenu
3. Sois pr√©cis et exhaustif
4. Format : ‚Ä¢ Chapitre/Th√®me par ligne
5. NE MENTIONNE AUCUNE DATE, MOIS OU P√âRIODE (septembre, octobre, etc.)
6. NE MENTIONNE AUCUN TRIMESTRE, SEMESTRE, OU P√âRIODE DE L'ANN√âE
7. Utilise uniquement les titres de chapitres et th√®mes

Exemple de format CORRECT :
‚Ä¢ Les fonctions
‚Ä¢ Les √©quations
‚Ä¢ L'analyse litt√©raire
‚Ä¢ La g√©om√©trie

Exemple de format INCORRECT (√† √©viter absolument) :
‚Ä¢ Les fonctions (septembre-octobre) ‚ùå
‚Ä¢ Chapitre 1 : Les √©quations (1er trimestre) ‚ùå
‚Ä¢ L'analyse (janvier √† mars) ‚ùå

IMPORTANT : Aucune mention temporelle ne doit appara√Ætre dans les titres.

G√©n√®re maintenant le programme d√©taill√© de $matiere :''';
  }
}